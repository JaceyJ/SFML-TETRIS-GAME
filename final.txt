JACEY JONSON -- CSCI 200 9:00AM M:W:F
--- Tetris ----------------------------------------------
Problem Description: 
I will be creating a program modeled after the popular game tetris. Users will be able to rotate randomly generated blocks and 
place them at the bottom of the screen to form straight lines with no gaps. This game will be animated and controlled using the
keyboard arrows and several other buttons which control speed of descent and rotation.

--------------------------------------------------------------------------------------------------------------------------------------

Program Documentation:
To run the program, use ./FP.exe
The game will automatically load and beign. Use the left and right arrow keys to move the block to the left and right respecitvely.
Use the up arrow to rotate the block 90 degrees and use the down arrow to increase the speed of descent.

There are many things I would implement if I had more time, the first being the removal of completed lines. I would implement this by
creating a function to check if a line is filled once a new block is placed, then removing that line from the placed vector and moving
the lines above it down. I would also like to create an animation of the blocks above "falling down" rather that the blocks above just
appearing one lower. I would also like to create a function which updates and displays the score as well as a clock which increases
the speed of descent as the game continues. 

My orignial proposal changed from including the removal of filled lines and an increasing score to a simpler version. The reason this 
change was necessary was because I ran out of time with the other final assignments I had to do that were due around the same time as 
this assignment. 

Also, the class Block was orignally intended to implement a function which would read the file as needed and another function which 
would rotate the block 90 degrees. Because the entire block is stored as a vector of block sections, it was easier to manipulate the 
block list outside of the class. Also, I decided to read in every rotation of the block along with all other file information in the 
beginning rather than creating code to rotate the block whenever the function is called because it would use up less memory during 
the runtime of the game.

---------------------------------------------------------------------------------------------------------------------------------------

List Data Structure
I used several types of lists throughout my program include 2D arrays, arrays, vectors and stacks. The list data structure I used the
most was vectors which were best used because they are resizable and could easily hold the current block and the set blocks on the screen
while also allowing information from any index of the list to be easily accessed and manipulated. I also used 2D arrays to store the 
information read in from the file for the blocks which allowed me to use dfs search to tranfer their representation in the 2D array to a physical
block on the screen.

----------------------------------------------------------------------------------------------------------------------------------------

Tests 
There is no direct user input in my program aside from keyboard actions, so I included common keyboard inputs and game functionality
that work correctly in my program

- Test 1: when the left and right arrows are pressed, the current block will move one gridspace to the left and right respectively 

- Test 2: when the block is at the edge of the grid and prompted to continue moving outside the grid, it will stay within the bounds 
of the grid

- Test 3: when the down arrow is pressed, the speed of descent of the block will increase

- Test 4: when the up arrow is pressed, the block rotates 90 degrees
    Note: with certain blocks the rotation does not appear as smoothly due to the way the blocks are based on one another, but 
    the block is rotation 90 degs in the clockwise direction everytime -> the code and functionality all work but the user display 
    could be adjusted

- Test 5: when the current block reaches the bottom of the grid or the top of a placed block, it stops moving, becomes a placed
block, and a new random block appears at the top of the screen

-----------------------------------------------------------------------------------------------------------------------------------------

Reflection
This project was very insightful on the process of developing a large scale program. I learned how to effectively put many of the best
practice to use to make my code more efficent and readable. I also enjoyed learning how to implement some of the topics we learned in class
into a large scale program such as implenting search methods and vectors to store and track information. I also learned how important it
is to have a plan going into large scale projects and the importance of keeping your code clean and readable. If I were to do this again, I
would focus on more detailed planning of my functions and how they relate to eachother. Although I had a general idea of where I was going
with my code and loosely what functions I needed to implement, I spent unnecessary time backtracking and reordering my functions because
I did not plan out exactly what needed to be done or how different functions would relate to eachother.